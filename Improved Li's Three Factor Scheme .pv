(* Li's three factor scheme *)

free c: channel.

type pkey.
type skey.
type key.
type bioInfo.
type G.
type exponent.
type User.
type Server.
type Timestamp.
(*

type tag.
type ktag.


*)

(* -----------keys and roles----------- *)
free Y: pkey.
free SK: key[private].
free user: User.
free server: Server.
free y: exponent[private].

(* -------------Constants------------- 


const Vi: bitstring.
const KiEx: bitstring.*)



const IDi: bitstring[private].
const PWi: bitstring[private].
const Bi: bioInfo[private].
const Ni: bitstring.
const x: skey[private].
const a: exponent[private].
const b: exponent[private].
const Ri: bitstring.
const Pi: bitstring.
const Vi: bitstring.
const Zi: bitstring.
const ZiEx: bitstring.
const RPWi: bitstring.
const Xi: bitstring.
const XiEx: bitstring.
const Ai: bitstring.
const T1: bitstring.
const T2: bitstring.
const CIDi: bitstring.
const C1: bitstring.
const C2: bitstring.
const C2Ex: bitstring.
const Gb: bitstring.
const Ga: bitstring.
const SC: bitstring.


(* -------------Events------------- *)
event smAcUser(User).
event serverAcUser(User).
event userAcServer(Server).

(* -----------Public key encryption----------- *)
fun pk(skey): pkey.
fun encrypt(bitstring, pkey): bitstring.
reduc forall x: bitstring, y: skey; decrypt(encrypt(x,pk(y)),y) = x.
(*-------------- Hash operation-------------- *)
fun h(bitstring): bitstring.
(*-------------- Hash1 operation-------------- *)
fun h1(bitstring): bitstring.
(* --------------Hash2 operation-------------- *)
fun h2(bitstring): bitstring.
(* ----------------BH operation---------------- *)
fun BH(bioInfo): bitstring.
(* ----------------BH operation---------------- *)
fun BH1(bioInfo): bitstring.
(* -------------Dot-product operation------------- *)
fun DP(skey, pkey): bitstring.
reduc forall x: skey, y: pkey; DPFactor(DP(x, y), x) = pk(x).
(* -----------------XOR operation----------------- *)
fun XOR(bitstring, bitstring): bitstring.
reduc forall x: bitstring, y: bitstring; XORagain(XOR(x, y), y) = x.
(* -----------------Mod operation------------------ *)
fun Mod(bitstring, bitstring): bitstring.
(* ----------------Concat operation---------------- *)
fun Concat(bitstring, bitstring):bitstring.
reduc forall x: bitstring, y: bitstring; Split(Concat(x, y)) = (x, y).
(* ----------------Concat operation---------------- *)
fun Concat1(bitstring, skey):bitstring.
reduc forall x: bitstring, y: skey; Split1(Concat1(x, y)) = (x, y).
(* ----------------Concat operation---------------- *)
fun Concat2(bitstring, pkey):bitstring.
reduc forall x: bitstring, y: pkey; Split2(Concat2(x, y)) = (x, y).
(* -----------------Type convertion---------------- *)
fun pkey2(pkey): bitstring.
fun skey2(skey): bitstring.
(* ----------------------Equation--------------------- *)
equation forall x: skey, y: skey; DP(x, pk(y)) = DP(y, pk(x)).
(*---------------- Diffie-Hellman---------------------- *)
const g: bitstring.
fun exp(bitstring, exponent): bitstring.
equation forall x: exponent, y: exponent; exp(exp(g, x), y) = exp(exp(g, y), x).
(*------------------ Signatures --------------------------*)
fun sign(bitstring, skey): bitstring.
reduc forall m: bitstring, k: skey; getmess(sign(m,k)) = m.
reduc forall m: bitstring, k: skey; checksign(sign(m,k), pk(k)) = m.

(* -------------------------query------------------------- *)

query attacker(SK).
query attacker(IDi).
query inj-event(userAcServer(server)) ==> inj-event(serverAcUser(user)).
query inj-event(serverAcUser(user)) ==> inj-event(smAcUser(user)).



(* ------------------------UP’s process------------------------ *)
let processUser(IDi: bitstring,PWi: bitstring,Bi:bioInfo,Vi:bitstring,Ni:bitstring,Y:pkey) =
let Ri=BH(Bi) in
let Pi=BH1(Bi) in
let RPWi=h(Concat(PWi,Ri)) in
let ZiEx=h(Concat(Concat(Concat2(Concat(Concat(Concat(Pi,Ni),Xi),Vi),Y),IDi),RPWi)) in
if ZiEx=Zi then
let Ai=XORagain(Vi,h(Concat(Concat(IDi,Ni),RPWi))) in
let XiEx=h(Ai) in
if XiEx=Xi then
event smAcUser(user);
new a:exponent;
let Y=exp(g,y) in
let CIDi=XOR(exp(Y,a), IDi) in
let C1=h(Concat(Concat(exp(g,a),Ai),T1)) in
out (c,(exp(g,a), CIDi, C1, T1));
in (c, (Gb: bitstring,C2: bitstring,T2: bitstring,SC:bitstring));
if checksign(SC, pk(x)) = C2 then
let C2Ex=h(Concat(Concat(Ai,Gb),T2)) in
if C2Ex=C2 then
let SK=h(Concat(Concat(Concat(exp(Gb,a),Ai),T1),T2)) in
event userAcServer(server).


(* ------------------------SP’s process------------------------ *)
let processServer(x:skey,y:exponent,Y:pkey) =

in (c, (Ga: bitstring, CIDi: bitstring, C1: bitstring,T1:bitstring));
new b:exponent;
let IDi=XORagain(CIDi,exp(Ga,y)) in
let Ai=h(Concat1(Concat(IDi,Ni),x)) in
let C1Ex=h(Concat(Concat(Ga,Ai),T1)) in
if C1Ex=C1 then
event serverAcUser(user);
let C2=h(Concat(Concat(Ai,Gb),T2)) in
let SC=sign(C2,x) in
let SK=h(Concat(Concat(Concat(exp(Ga,b),Ai),T1),T2)) in
out (c,(exp(g,b),C2,T2,SC)).


(* ------------------------MP’s process------------------------ *)
process
(* Initialization
let xP = pk(x) in
new l: bitstring;
 *)
(* Constants stored in device *)
new Bi: bioInfo;
new PWi: bitstring;
let Ri=BH(Bi) in
let Pi=BH1(Bi) in
let RPWi=h(Concat(PWi,Ri)) in
let Ai=h(Concat1(Concat(IDi,Ni),x)) in
let Xi=h(Ai) in
let Vi=XOR(Ai,h(Concat(Concat(IDi,Ni),RPWi))) in
let Zi=h(Concat(Concat(Concat2(Concat(Concat(Concat(Pi,Ni),Xi),Vi),Y),IDi),RPWi)) in
(
!(processUser(IDi, PWi, Bi, Vi, Ni,Y)) |
!(processServer(x,y,Y))
)
